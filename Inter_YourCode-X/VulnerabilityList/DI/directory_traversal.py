import requests
import sys, os
import json
import time
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# [X] 사용자 입력 값에 대한 검증 및 필터링이 미흡하여 시스템의 중요한 파일에 접근이 가능하며, 서버의 파일을 읽거나 쓰는 등의 공격이 가능한 경우
# [∆] 사용자 입력 값에 대한 검증 및 필터링이 미흡하여 특정 파일에 접근이 가능한 경우
# [O] 사용자 입력 값에 대한 검증 및 필터링이 안전하게 이루어진 경우
def inspec_url(url, check_files):
    inspection_url_1 = []
    form_value = []
    for file in check_files:
        # 페이지 내용 가져오기
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')

        # form 태그 찾기 + input, textarea, select, button
        form = soup.find('form')
        if form is None:
            continue
        # print(f"Checking {file}")
        
        # 해당 데이터를 분석 후 저장할 딕셔너리
        form_data = {
            "method" : form.get('method', '').upper(),
            "action" : form.get('action',''),
            "input_fields": [],
            "textarea_fields": [],
            "select_fields": [],
            "button_fields": []            
        }
        
        # input 태그 속성 데이터 식별
        inputs = form.find_all('input')
        for i in inputs:
            input_info = {
                "name": i.get('name'),
                "type": i.get('type')
            }
            form_data["input_fields"].append(input_info)

        # textarea 태그 속성 데이터 식별
        textareas = form.find_all('textarea')
        for i in textareas:
            textarea_info = {
                "name": i.get('name')
            }
            form_data["textarea_fields"].append(textarea_info)
        
        # select 태그 속성 데이터 식별
        selects = form.find_all('select')
        for i in selects:
            select_info = {
                "name": i.get('name')
            }
            form_data["select_fields"].append(select_info)    

        # button 태그 속성 데이터 식별
        buttons = form.find_all('button')
        for i in buttons:
            button_info = {
                "name": i.get('name')
            }
            form_data["button_fields"].append(button_info)        

        action_url = urljoin(url, form_data["action"])

        form_value.append(form_data)
        inspection_url_1.append(action_url)

    return form_value, inspection_url_1

def befor_param(parameter_values):
    result_urls = [url.split('?')[0] for url in parameter_values if '?' in url]
    method = []
    for file in result_urls:
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')

        form = soup.find('form')
        if form is not None:
            method.append("X")
        else:
            method.append("O")
    
    return method, result_urls

# def basicTraversal(action_1, form_data, action_2, method_2, param_2):
#     # GET 방식 처리
#     for action_url in action_1:
#         print(f"\nAttack URL(basicTraversal): {action_url}")
#         for form_dict in form_data:
#             method = form_dict["method"]
#             input_fields = form_dict["input_fields"]
#             textarea_fields = form_dict["textarea_fields"]

#             print(f"\nMethod: {method}")
#             print(f"Input Fields: {input_fields}")
#             print(f"Textarea Fields: {textarea_fields}")


    # print("====================")
    # print(f"action_1: {action_1}")
    # for form_dict in form_data:
    #     method = form_dict["method"]
    #     input_fields = form_dict["input_fields"]
    #     textarea_fields = form_dict["textarea_fields"]
        
    #     print(f"\nMethod: {method}")
    #     print(f"Input Fields: {input_fields}")
    #     print(f"Textarea Fields: {textarea_fields}")

    # print("\n====================")
    # print(f"action_2: {action_2}")
    # print(f"method_2: {method_2}")
    # print(f"param_2: {param_2}")    


# main에서 매개변수로 전달된 url, check_url 받아와서 점검 항목 수행
if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Error code: url[1], check_url[2], identi_json[3] 인자 전달받지 못함")
        sys.exit(1)
    url = sys.argv[1]
    urls_json = json.loads(sys.argv[2])
    identi_json = json.loads(sys.argv[3])

    # URL의 Parameter 값 작성 경로 유추('?', '=')
    check_identis = [identi for identi in identi_json if '?' in identi and '=' in identi]
    # 파라미터 값 이전 결과들 추출
    parameter_values_s = set(identi.split('=')[0] + '=' for identi in check_identis)
    for identi in check_identis:
        if '&' in identi:
            parameter_values_s.add(identi)
    parameter_values = list(parameter_values_s)

    static_extensions = {'.jpg', '.jpeg', '.png', '.css', '.js'}
    check_files_1 = [file for file in urls_json if os.path.splitext(file)[1] not in static_extensions]

    # POST 방식 추출을 위한 호출
    form_data_1, action_url_1 = inspec_url(url, check_files_1)
    # print(form_data_1)
    # print(action_url_1)

    # GET 방식 추출을 위한 호출
    methods, action_url_2 = befor_param(parameter_values)
    # print(parameter_values)
    # print(methods)
    # print(action_url_2)

    # 점검 url
    inspection_url = []
    # Basic Traversal
    basicTraversal(action_url_1, form_data_1, action_url_2, methods, parameter_values)
    # for action_1, form_1, action_2, method_2, param_2 in zip(action_url_1, form_data_1, action_url_2, methods, parameter_values):
    #     basicTraversal(action_1, form_1, action_2, method_2, param_2)
    #     inspection_url.append(action_1)
    #     inspection_url.append(action_2)


    # NULL-Byte Traversal
    # Double-Encoding Traversal
    # Unicode-Encoding Traversal