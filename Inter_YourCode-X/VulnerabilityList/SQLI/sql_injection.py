import requests
import sys, os
import json
import time
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# [X] 임의로 작성된 SQL 쿼리 입력에 대한 검증이 미흡하여 사용자의 정보(쿠키, 세션 등)를 탈취하거나 자동으로 비정상적인 기능이 실행, 조작의 가능한 경우
# [∆] 임의로 작성된 SQL 쿼리 입력에 대한 검증이 미흡한 경우
# [O] 임의로 작성된 SQL 쿼리 입력에 대한 검증이 안전하게 이루어진 경우

def exploitsFile(x_file):
    with open(x_file,'r') as file:
        explits = file.read().splitlines()
    return explits

# Classic SQL Injection
def classicSQLI(action_url, form_data):
    # form_data 딕셔너리를 이용하여 필요한 정보 사용
    # input, textarea가 사용자가 입력하는 값이
    method = form_data["method"]
    input_fields = form_data["input_fields"] #key: 'name','type' 
    textarea_fields = form_data["textarea_fields"] #key: 'name'
    # select_fields = form_data["select_fields"] #key: 'name'
    # button_fields = form_data["button_fields"] #key: 'name'

    # 데이터를 처리하는 파일에서 취약점 점검 시작
    print(f"\nAttack URL(classicSQLI): {action_url}")
    if method == "GET":
        print("Method: GET")
    elif method == "POST":
        print("Method: POST")
        #exploit code 불러와서 담기
        x_file = "../VulnerabilityList/SQLI/classic_sqli_post.txt"
        exploits = exploitsFile(x_file)
        # print(f"exploits: {exploits}")
        
        # HTML->input->type
        # text, password, radio, checkbox, submit, file, email, number, date, color
        # 값을 작성하여 조작할 수 있는 text, password, email을 활용
        for exploit in exploits:
            data = {}
            for field in input_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            for field in textarea_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            # print(f"[*]Data: {data}") 
            response = requests.post(action_url, data)
            # print(response.text)

            # [위험, 주의, 양호]- 해당 키워드 주의에 해당
            keywords = ['SQL', 'syntax']
            for keyword in keywords:
                if keyword in response.text:
                    print(f"Attack Detected: {exploit}", file=sys.stdout)
                    print(f"Risk: Medium", file=sys.stdout)
                    print(f"Target url: {action_url}", file=sys.stdout)
                    print(f"Detail payload: Classic SQL Injection", file=sys.stdout)
                    break
            logic_keywords = ['', '', '', '', '', '']

    else:
        print("Error occurred while attempting(POST/GET)")

# Error-Based SQL Injection
def errorBasedSQLI(action_url, form_data):
    method = form_data["method"]
    input_fields = form_data["input_fields"] # key: 'name','type' 
    textarea_fields = form_data["textarea_fields"] # key: 'name'

    print(f"\nAttack URL(errorBasedSQLI): {action_url}")
    if method == "GET":
        print("Method: GET")
    elif method == "POST":
        print("Method: POST")
        x_file = "../VulnerabilityList/SQLI/error_based_sqli_post.txt"
        exploits = exploitsFile(x_file)
        
        for exploit in exploits:
            data = {}
            for field in input_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            for field in textarea_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            # print(f"[*]Data: {data}") 
            response = requests.post(action_url, data)
            # print(response.text)

            # [위험, 주의, 양호]- 해당 키워드 주의에 해당
            keywords = [
                'You have an error in your SQL syntax;',
                'FUNCTION',
                'Key column'
            ]
            for keyword in keywords:
                if keyword in response.text:
                    print(f"Attack Detected: {exploit}", file=sys.stdout)
                    print(f"Risk: Medium", file=sys.stdout)
                    print(f"Target url: {action_url}", file=sys.stdout)
                    print(f"Detail payload: Error-Based SQL Injection", file=sys.stdout)
                    break
            logic_keywords = ['', '', '', '', '', '']

    else:
        print("Error occurred while attempting(POST/GET)")

# Union-Based SQL Injection
def unionBasedSQLI(action_url, form_data):
    method = form_data["method"]
    input_fields = form_data["input_fields"] # key: 'name','type' 
    textarea_fields = form_data["textarea_fields"] # key: 'name'

    print(f"\nAttack URL(unionBasedSQLI): {action_url}")
    if method == "GET":
        print("Method: GET")
    elif method == "POST":
        print("Method: POST")
        x_file = "../VulnerabilityList/SQLI/union_sqli_post.txt"
        exploits = exploitsFile(x_file)
        
        for exploit in exploits:
            data = {}
            for field in input_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            for field in textarea_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            # print(f"[*]Data: {data}") 
            response = requests.post(action_url, data)
            # print(response.text)

            keywords = ['패스워드', 'password', 'pass', 'pw']
            # response.text를 분석
            for keyword in keywords:
                if 'alert' in response.text and keyword in response.text:
                    #print(len(response.text))
                    print(f"Attack Detected: {exploit}", file=sys.stdout)
                    print(f"Risk: High", file=sys.stdout)
                    print(f"Target url: {action_url}", file=sys.stdout)
                    print(f"Detail payload: Union-Based SQL Injection", file=sys.stdout)
                    break

            logic_keywords = ['', '', '', '', '', '']

    else:
        print("Error occurred while attempting(POST/GET)")    

# Blind SQL Injection
def blindSQLI(action_url, form_data):
    method = form_data["method"]
    input_fields = form_data["input_fields"] #key: 'name','type' 
    textarea_fields = form_data["textarea_fields"] #key: 'name'

    print(f"\nAttack URL(blindSQLI): {action_url}")
    if method == "GET":
        print("Method: GET")
    elif method == "POST":
        print("Method: POST")
        x_file = "../VulnerabilityList/SQLI/blind_sqli_post.txt"
        exploits = exploitsFile(x_file)

        for exploit in exploits:
            data = {}
            for field in input_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            for field in textarea_fields:
                name = field.get("name")
                if name:
                    data[name] = exploit
            # print(f"[*]Data: {data}")
            start_time = time.time() # 요청 시작 시간 기록
            response = requests.post(action_url, data)
            elapsed_time = time.time() - start_time  # 경과 시간(요청에 걸린 시간 기록)

            # response.text를 분석
            # 응답 시간이 1초를 초과할 경우(비정상으로 추측)
            keywords = ['패스워드', 'password', 'pass', 'pw']
            if elapsed_time > 1:
                for keyword in keywords:
                    if 'alert' in response.text and keyword in response.text:
                        #print(len(response.text))
                        print(f"Attack Detected: {exploit}", file=sys.stdout)
                        print(f"Risk: Medium", file=sys.stdout)
                        print(f"Target url: {action_url}", file=sys.stdout)
                        print(f"Detail payload: Blind SQL Injection", file=sys.stdout)
                        break
                continue                    
            # 응답 시간이 1초 이하일 경우(정상으로 추측)
            else:
                print("Elapsed time..")
                continue
            

    else:
        print("Error occurred while attempting(POST/GET)")

def outOfBandSQLI(action_url,form_data):
    return
def secondOrderSQLI(action_url,form_data):
    return



# main에서 매개변수로 전달된 url, check_url 받아와서 점검 항목 수행
if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Error code: url[1], check_url[2] 인자 전달받지 못함")
        sys.exit(1)
    url = sys.argv[1]
    urls_json = json.loads(sys.argv[2])

    # 정적 콘텐츠 제공하는 확장자 제외(.jpg, .jpeg, .png, etc., .css, .js)
    static_extensions = {'.jpg', '.jpeg', '.png', '.css', '.js'}
    check_files = [file for file in urls_json if os.path.splitext(file)[1] not in static_extensions]
    # print(f"check_files: {check_files}")

    # 점검 url
    inspection_url = []
    # 취약점(SQL Injection)에 해당되는 파일 식별
    for file in check_files:
        # print(f"\nChecking {file}")
        # 페이지 내용 가져오기
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')
        # form 태그 찾기 + input, textarea, select, button
        form = soup.find('form')
        if form is None:
            print(f"No forms found in {file}\n")
            continue
        # 해당 데이터를 분석 후 저장할 딕셔너리
        form_data = {
            # 데이터 전송과 목적지 확인 
            "method" : form.get('method', '').upper(),
            "action" : form.get('action',''),
            "input_fields": [],
            "textarea_fields": [],
            "select_fields": [],
            "button_fields": []            
        }
        # print(f"||Form method||: {form_data['method']}")
        # print(f"||Form action||: {form_data['action']}")
        # input 태그 속성 데이터 식별
        # print("||Input field||")
        inputs = form.find_all('input')
        for i in inputs:
            input_info = {
                "name": i.get('name'),
                "type": i.get('type')
            }
            form_data["input_fields"].append(input_info)
            # print(f"name: {i.get('name')}, type: {i.get('type')}")
        # textarea 태그 속성 데이터 식별
        # print("||Textarea field||")
        textareas = form.find_all('textarea')
        for i in textareas:
            textarea_info = {
                "name": i.get('name')
            }
            form_data["textarea_fields"].append(textarea_info)
            # print(f"name: {i.get('name')}")
        # select 태그 속성 데이터 식별
        # print("||Selects field||")
        selects = form.find_all('select')
        for i in selects:
            select_info = {
                "name": i.get('name')
            }
            form_data["select_fields"].append(select_info)
            # print(f"name: {i.get('name')}")
        # button 태그 속성 데이터 식별
        # print("||button field||")
        buttons = form.find_all('button')
        for i in buttons:
            button_info = {
                "name": i.get('name')
            }
            form_data["button_fields"].append(button_info)        
            # print(f"name: {i.get('name')}")
        action_url = urljoin(url, form_data["action"])
        inspection_url.append(action_url)

        # Classic SQLI 함수 호출
        classicSQLI(action_url, form_data)

        # Error-Based SQLI 함수 호출
        errorBasedSQLI(action_url, form_data)

        # Union-Based SQLI 함수 호출
        unionBasedSQLI(action_url, form_data)

        # Blind SQLI 함수 호출
        blindSQLI(action_url,form_data)        

        # Out-of-band SQLI 함수 호출
        outOfBandSQLI(action_url,form_data)

        # Second Order SQLI 함수 호출
        secondOrderSQLI(action_url,form_data)

        # 일시적 점검을 위한 중단
        # break
    
    for target in inspection_url:
        print(f"Inspection_url: {target}", file=sys.stdout)    
