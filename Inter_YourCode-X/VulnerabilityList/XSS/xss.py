import requests
import sys, os
import json
import time
from bs4 import BeautifulSoup
from urllib.parse import urljoin

def storedXSS(action_url, form_data):
    method = form_data["method"]
    input_fields = form_data["input_fields"]
    textarea_fields = form_data["textarea_fields"]

    print(f"\nAttack URL(classicSQLI): {action_url}")
    if method == "GET":
        print("Method: GET")
    elif method == "POST":
        print("Method: POST")


# main에서 매개변수로 전달된 url, check_url 받아와서 점검 항목 수행
if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Error code: url[1], check_url[2] 인자 전달받지 못함")
        sys.exit(1)
    url = sys.argv[1]
    urls_json = json.loads(sys.argv[2])

    # 정적 콘텐츠 제공하는 확장자 제외(.jpg, .jpeg, .png, etc., .css, .js)
    static_extensions = {'.jpg', '.jpeg', '.png', '.css', '.js'}
    check_files = [file for file in urls_json if os.path.splitext(file)[1] not in static_extensions]
    # print(f"check_files: {check_files}")

    # 점검 url
    inspection_url = set()
    # 취약점(XSS)에 해당되는 파일 식별
    for file in check_files:
        # 페이지 내용 가져오기
        response = requests.get(file)
        soup = BeautifulSoup(response.text, 'html.parser')
        
        # form 태그 찾기 + input, textarea, select, button
        form = soup.find('form')
        if form is None:
            # print(f"\nChecking {file}")
            # print(f"No forms found in {file}\n")
            continue

        print(f"Checking {file}")
        # 해당 데이터를 분석 후 저장할 딕셔너리
        form_data = {
            "method" : form.get('method', '').upper(),
            "action" : form.get('action',''),
            "input_fields": [],
            "textarea_fields": [],
            "select_fields": [],
            "button_fields": []            
        }
        # input 태그 속성 데이터 식별
        inputs = form.find_all('input')
        for i in inputs:
            input_info = {
                "name": i.get('name'),
                "type": i.get('type')
            }
            form_data["input_fields"].append(input_info)
        # textarea 태그 속성 데이터 식별
        textareas = form.find_all('textarea')
        for i in textareas:
            textarea_info = {
                "name": i.get('name')
            }
            form_data["textarea_fields"].append(textarea_info)
        # select 태그 속성 데이터 식별
        selects = form.find_all('select')
        for i in selects:
            select_info = {
                "name": i.get('name')
            }
            form_data["select_fields"].append(select_info)
        # button 태그 속성 데이터 식별
        buttons = form.find_all('button')
        for i in buttons:
            button_info = {
                "name": i.get('name')
            }
            form_data["button_fields"].append(button_info)        

        action_url = urljoin(url, form_data["action"])
        inspection_url.add(action_url)

        # Stored XSS 함수 호출
        # storedXSS(action_url, form_data)

        # Reflected XSS 함수 호출
        # reflectedXSS(action_url, form_data)

        # DOM XSS 함수 호출
        # domXSS(action_url, form_data)


    
    for target in inspection_url:
        print(f"점검 대상: {target}", file=sys.stdout)
